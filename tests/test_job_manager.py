import time

import pytest
from conftest import DOCKER_IMAGE_POSTGRES, POSTGRES_HOST, POSTGRES_USER


def test_success(jobman):
    cmd = "python"

    job_name = jobman.create_instant_cli_job(cmd, "--help")
    assert job_name.startswith(f'kjs-cli-job-{cmd.replace("_", "-")}')
    assert jobman.list_jobs() == [job_name]

    # assert jobman.job_status(job_name).active == 1

    time.sleep(10)

    pods = jobman.list_pods(job_name=job_name)
    assert pods[0].startswith(f'kjs-cli-job-{cmd.replace("_", "-")}')

    assert len(jobman.job_logs(job_name)) > 10

    status, _ = jobman.job_status(job_name)
    assert status == "SUCCEEDED"

    assert jobman.delete_job(job_name)

    time.sleep(3)

    assert jobman.list_jobs() == []
    assert jobman.list_pods() == []


def test_failed(jobman):
    cmd = "python"

    job_name = jobman.create_instant_cli_job(cmd, "---h")
    assert job_name.startswith(f'kjs-cli-job-{cmd.replace("_", "-")}')
    assert jobman.list_jobs() == [job_name]

    time.sleep(10)
    status, details = jobman.job_status(job_name)
    assert status == "FAILED"
    assert details["reason"] == "BackoffLimitExceeded"

    pods = jobman.list_pods(job_name=job_name)
    assert pods[0].startswith(f'kjs-cli-job-{cmd.replace("_", "-")}')

    assert len(jobman.job_logs(job_name)) > 10

    assert not jobman.delete_job(job_name)

    time.sleep(3)

    assert jobman.list_jobs() == []
    assert jobman.list_pods() == []


@pytest.mark.parametrize("jobman", [dict(env={"TEST_VAR": "hi_there"})], indirect=True)
def test_env(jobman):
    cmd = "printenv"

    job_name = jobman.create_instant_cli_job(cmd, "TEST_VAR")
    assert job_name.startswith("kjs-cli-job-printenv-")
    assert jobman.list_jobs() == [job_name]

    time.sleep(10)

    status, _ = jobman.job_status(job_name)
    assert status == "SUCCEEDED"

    assert jobman.job_logs(job_name).startswith("hi_there")


def _func_add(a, b):
    result = a + b
    print(result)
    return 0


def test_instant_python_job(jobman):
    job_name = jobman.create_instant_python_job(func=_func_add, a=3, b=5)
    assert job_name.startswith("kjs-job-python-")
    assert jobman.list_jobs() == [job_name]

    time.sleep(10)

    status, _ = jobman.job_status(job_name)
    assert status == "SUCCEEDED"

    assert jobman.job_logs(job_name).endswith("8\n")


def test_scheduled_job(jobman):
    cron = "*/1 * * * *"
    cmd = "printenv"

    job_name = jobman.create_scheduled_cli_job(cron, cmd, "TEST_VAR")
    assert jobman.list_scheduled_jobs() == [job_name]

    time.sleep(10)

    # assert job_name.startswith(f'job-kjs-{cmd.replace("_", "-")}')
    # assert jobman.list_jobs() == [job_name]

    assert jobman.delete_scheduled_job(job_name)

    time.sleep(3)

    assert jobman.list_scheduled_jobs() == []
    assert jobman.list_pods() == []


@pytest.mark.skip(reason="Not fully implemented")
@pytest.mark.parametrize(
    "jobman", [dict(docker_image=DOCKER_IMAGE_POSTGRES)], indirect=True
)
def test_db_access(jobman, psql):
    cmd = "psql"

    job_name = jobman.create_instant_cli_job(
        cmd, username=POSTGRES_USER, host=POSTGRES_HOST
    )
    assert job_name.startswith(f'job-kjs-{cmd.replace("_", "-")}')
    assert jobman.list_jobs() == [job_name]

    time.sleep(10)

    print(jobman.job_status(job_name))

    print(jobman.job_logs(job_name))
    return

    assert jobman.job_status(job_name) == "SUCCESS"

    pods = jobman.list_pods(job_name=job_name)
    assert pods[0].startswith(f'job-kjs-{cmd.replace("_", "-")}')

    print(jobman.job_logs(job_name))

    with psql.cursor() as curs:
        curs.execute(
            "CREATE TABLE IF NOT EXISTS test1 ( \
                         id    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, \
                        num         integer NOT NULL default 0 \
                    );"
        )

        curs.execute("INSERT INTO test1 (num) VALUES (5);")

        curs.execute("SELECT num from test1;")

        print(f"{curs.fetchone()}")
